/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StackRouteImport } from './routes/stack'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as HomeRouteImport } from './routes/home'
import { Route as ContactRouteImport } from './routes/contact'

const StackRoute = StackRouteImport.update({
  id: '/stack',
  path: '/stack',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/projects': typeof ProjectsRoute
  '/stack': typeof StackRoute
}
export interface FileRoutesByTo {
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/projects': typeof ProjectsRoute
  '/stack': typeof StackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/projects': typeof ProjectsRoute
  '/stack': typeof StackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/contact' | '/home' | '/projects' | '/stack'
  fileRoutesByTo: FileRoutesByTo
  to: '/contact' | '/home' | '/projects' | '/stack'
  id: '__root__' | '/contact' | '/home' | '/projects' | '/stack'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ContactRoute: typeof ContactRoute
  HomeRoute: typeof HomeRoute
  ProjectsRoute: typeof ProjectsRoute
  StackRoute: typeof StackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stack': {
      id: '/stack'
      path: '/stack'
      fullPath: '/stack'
      preLoaderRoute: typeof StackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  ContactRoute: ContactRoute,
  HomeRoute: HomeRoute,
  ProjectsRoute: ProjectsRoute,
  StackRoute: StackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
